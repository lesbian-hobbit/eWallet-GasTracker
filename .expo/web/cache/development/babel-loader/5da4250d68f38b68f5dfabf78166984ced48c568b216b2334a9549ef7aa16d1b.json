{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Ionicons } from '@expo/vector-icons';\nimport { collection, query, where, onSnapshot, writeBatch, runTransaction, doc, getDocs, setDoc, addDoc, Timestamp } from \"firebase/firestore\";\nimport { auth, db, firebase } from \"../firebase\";\nimport { onAuthStateChanged, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport * as SMS from \"expo-sms\";\nimport axios from 'axios';\nimport { encode } from 'base-64';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SendCash = function SendCash(_ref) {\n  var _route$params;\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState(5000),\n    _useState2 = _slicedToArray(_useState, 2),\n    balance = _useState2[0],\n    setBalance = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    email = _useState4[0],\n    setEmail = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    userInfo = _useState6[0],\n    setUserInfo = _useState6[1];\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    transactions = _useState8[0],\n    setTransactions = _useState8[1];\n  var _useState9 = useState(),\n    _useState10 = _slicedToArray(_useState9, 2),\n    fullname = _useState10[0],\n    setName = _useState10[1];\n  var _useState11 = useState(),\n    _useState12 = _slicedToArray(_useState11, 2),\n    recipientEmail = _useState12[0],\n    setRecipientEmail = _useState12[1];\n  var _useState13 = useState(),\n    _useState14 = _slicedToArray(_useState13, 2),\n    amount = _useState14[0],\n    setAmount = _useState14[1];\n  var _useState15 = useState([]),\n    _useState16 = _slicedToArray(_useState15, 2),\n    recentContacts = _useState16[0],\n    setRecentContacts = _useState16[1];\n  var _useState17 = useState(\"\"),\n    _useState18 = _slicedToArray(_useState17, 2),\n    ConfirmPassword = _useState18[0],\n    setPassword = _useState18[1];\n  var _useState19 = useState(\"\"),\n    _useState20 = _slicedToArray(_useState19, 2),\n    password = _useState20[0],\n    setPin = _useState20[1];\n  var _useState21 = useState(\"\"),\n    _useState22 = _slicedToArray(_useState21, 2),\n    phoneNumber = _useState22[0],\n    setPhoneNumber = _useState22[1];\n  var _useState23 = useState(''),\n    _useState24 = _slicedToArray(_useState23, 2),\n    otp = _useState24[0],\n    setOTP = _useState24[1];\n  var phoneNumber2 = \"+639166655582\";\n  var phoneNumber4 = \"+639166655582\";\n  var _useState25 = useState([]),\n    _useState26 = _slicedToArray(_useState25, 2),\n    recentContactsList = _useState26[0],\n    setRecentContactsList = _useState26[1];\n  var scannedData = (_route$params = route.params) == null ? void 0 : _route$params.scannedData;\n  if (!global.btoa) {\n    global.btoa = encode;\n  }\n  var twilioAccountSid = \"ACad63823e8efaa1803b3473082f3945b0\";\n  var twilioAuthToken = \"c6d17c5de96fdcb54f32e031fd0f3703\";\n  var getRecipientUid = function () {\n    var _ref2 = _asyncToGenerator(function* (email) {\n      var usersRef = collection(db, 'users');\n      var q = query(usersRef, where('email', '==', email));\n      var querySnapshot = yield getDocs(q);\n      if (!querySnapshot.empty) {\n        var recipient = querySnapshot.docs[0];\n        return recipient.id;\n      }\n      throw new Error('Recipient not found');\n    });\n    return function getRecipientUid(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var ConfirmPin = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      onAuthStateChanged(auth, _asyncToGenerator(function* () {\n        var user = auth.currentUser;\n        if (user) {\n          var uid = user.uid;\n          setEmail(user.email);\n          var userCredential = yield signInWithEmailAndPassword(auth, user.email, ConfirmPassword).then(function (res) {\n            var user = auth.currentUser;\n            if (user.emailVerified) {\n              console.log(res);\n              var userData = userCredential.user;\n              console.log(\"User password:\", userData.password, uid, userData.email);\n            } else {\n              alert(\"Password does not match\");\n            }\n          });\n        }\n      }));\n      if (ConfirmPin) {\n        transferFunds();\n      }\n    });\n    return function ConfirmPin() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getRecentContacts = function getRecentContacts() {\n    var user = auth.currentUser.uid;\n    var uid = user;\n    var sentTransactionRef = firebase.firestore().collection('users').doc(uid).collection('history').doc('DUgVrFDJhas4wAuX07re').collection('Sent');\n    sentTransactionRef.onSnapshot(function (querySnapshot) {\n      var recentContactsMap = {};\n      querySnapshot.forEach(function (doc) {\n        var _doc$data = doc.data(),\n          ReceiverUid = _doc$data.ReceiverUid,\n          ReceiverEmail = _doc$data.ReceiverEmail,\n          TimeStamp = _doc$data.TimeStamp;\n        console.log(\"transaction\", sentTransactionRef.data());\n        if (!recentContactsMap[ReceiverEmail]) {\n          recentContactsMap[ReceiverEmail] = {\n            ReceiverEmail: ReceiverEmail,\n            ReceiverUid: ReceiverUid,\n            TimeStamp: TimeStamp\n          };\n        } else {\n          var existingTransaction = recentContactsMap[ReceiverEmail];\n          if (TimeStamp > existingTransaction.TimeStamp) {\n            recentContactsMap[ReceiverEmail] = {\n              ReceiverEmail: ReceiverEmail,\n              ReceiverUid: ReceiverUid,\n              TimeStamp: TimeStamp\n            };\n          }\n        }\n      });\n      var sortedRecentContacts = Object.values(recentContactsMap).sort(function (a, b) {\n        return b.TimeStamp - a.TimeStamp;\n      }).slice(0, 5);\n      setRecentContactsList(sortedRecentContacts);\n    });\n  };\n  var transferFunds = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var recipientUid = yield getRecipientUid(recipientEmail);\n        var sfDocRef = doc(db, 'users', recipientUid);\n        yield runTransaction(db, function () {\n          var _ref6 = _asyncToGenerator(function* (transaction) {\n            var sfDoc = yield transaction.get(sfDocRef);\n            if (!sfDoc.exists()) {\n              throw new Error('Document does not exist!');\n            }\n            var newWallet = sfDoc.data().wallet + Number(amount);\n            transaction.update(sfDocRef, {\n              wallet: newWallet\n            });\n          });\n          return function (_x2) {\n            return _ref6.apply(this, arguments);\n          };\n        }());\n        console.log('Transaction successfully committed!: ' + Number(amount) + ' ' + recipientUid);\n        var deduct = function () {\n          var _ref7 = _asyncToGenerator(function* () {\n            var user = auth.currentUser.uid;\n            if (user) {\n              var uid = user;\n              try {\n                yield runTransaction(db, function () {\n                  var _ref8 = _asyncToGenerator(function* (transaction) {\n                    var userRef = firebase.firestore().collection('users').doc(uid);\n                    var sf = yield transaction.get(userRef);\n                    if (!sf.exists) {\n                      throw new Error('Document does not exist!');\n                    }\n                    var deductedWallet = sf.data().wallet - Number(amount);\n                    transaction.update(userRef, {\n                      wallet: deductedWallet\n                    });\n                    alert('Successfully sent ₱' + Number(amount) + ' to ' + recipientEmail);\n                    console.log('Successfully sent ₱' + Number(amount) + ' to ' + recipientEmail);\n                  });\n                  return function (_x3) {\n                    return _ref8.apply(this, arguments);\n                  };\n                }());\n              } catch (error) {\n                alert('Error updating wallet:', error);\n                console.error('Error updating wallet:', error);\n              }\n            }\n          });\n          return function deduct() {\n            return _ref7.apply(this, arguments);\n          };\n        }();\n        yield deduct();\n        var user = auth.currentUser.uid;\n        if (user) {\n          var uid = user;\n          var SenderEmail = auth.currentUser.email;\n          var newTransactions = function () {\n            var _ref9 = _asyncToGenerator(function* () {\n              yield addDoc(collection(db, 'users', uid, 'history', 'DUgVrFDJhas4wAuX07re', 'Sent'), {\n                transactions: amount,\n                Timestamp: new Date(),\n                ReceiverUid: recipientUid,\n                ReceiverEmail: recipientEmail\n              });\n            });\n            return function newTransactions() {\n              return _ref9.apply(this, arguments);\n            };\n          }();\n          yield newTransactions();\n          var recievedHis = function () {\n            var _ref10 = _asyncToGenerator(function* () {\n              yield addDoc(collection(db, 'users', recipientUid, 'history', 'DUgVrFDJhas4wAuX07re', 'Recieved'), {\n                transactions: amount,\n                Timestamp: new Date(),\n                Sender: uid,\n                SenderEmail: SenderEmail\n              });\n            });\n            return function recievedHis() {\n              return _ref10.apply(this, arguments);\n            };\n          }();\n          yield recievedHis();\n        }\n      } catch (error) {\n        console.error('Error transferring funds:', error);\n      }\n    });\n    return function transferFunds() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    onAuthStateChanged(auth, function (user) {\n      if (user) {\n        var uid = user.uid;\n        setEmail(user.email);\n        var getWallet = function () {\n          var _ref11 = _asyncToGenerator(function* () {\n            var docRef = doc(db, 'users', uid);\n            var unsubscribe = onSnapshot(docRef, function (docSnap) {\n              if (docSnap.exists()) {\n                console.log('Document data:', docSnap.data());\n                var data = docSnap.data();\n                setUserInfo(data);\n              } else {\n                console.log('No such document!');\n              }\n            });\n            return unsubscribe;\n          });\n          return function getWallet() {\n            return _ref11.apply(this, arguments);\n          };\n        }();\n        var unsubscribe = getWallet();\n        return function () {\n          unsubscribe();\n        };\n      } else {\n        navigation.navigate('Login');\n      }\n    });\n  }, []);\n  var handleTransferFunds = function handleTransferFunds() {\n    setBalance(balance - 100);\n  };\n  useEffect(function () {\n    getRecentContacts();\n    setRecipientEmail(scannedData);\n  }, []);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center'\n    },\n    children: _jsxs(ImageBackground, {\n      source: require(\"../assets/background1.jpg\"),\n      resizeMode: \"cover\",\n      style: styles.image,\n      children: [_jsxs(View, {\n        style: styles.balanceContainer,\n        children: [_jsx(Text, {\n          style: styles.balanceText,\n          children: \"Current Balance\"\n        }), _jsx(View, {\n          style: styles.currentBalanceContainer,\n          children: _jsxs(Text, {\n            style: styles.amountText,\n            children: [\"\\u20B1 \", userInfo.wallet]\n          })\n        }), _jsx(Text, {\n          style: styles.label,\n          children: \"Recent Contacts\"\n        }), _jsx(Text, {\n          children: scannedData\n        }), _jsx(View, {\n          style: styles.recentContactsContainer,\n          children: _jsx(FlatList, {\n            data: recentContactsList,\n            horizontal: true,\n            renderItem: function renderItem(_ref12) {\n              var item = _ref12.item;\n              return _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  return setRecipientEmail(item.recipientEmail);\n                },\n                children: _jsx(Text, {\n                  numberOfLines: 1,\n                  style: {\n                    fontSize: 12\n                  },\n                  children: item.recipientEmail\n                })\n              });\n            }\n          })\n        })]\n      }), _jsxs(View, {\n        style: {\n          padding: 20\n        },\n        children: [_jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Input Recipient's Email: \",\n          placeholderTextColor: \"rgba(0, 0, 0, 0.5)\",\n          value: recipientEmail,\n          onChangeText: setRecipientEmail\n        }), _jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Input Amount: \",\n          placeholderTextColor: \"rgba(0, 0, 0, 0.5)\",\n          value: amount,\n          onChangeText: setAmount\n        }), _jsx(TextInput, {\n          style: {\n            borderWidth: 1,\n            padding: 10\n          },\n          placeholder: \"Enter Phone Number\",\n          value: phoneNumber,\n          onChangeText: setPhoneNumber\n        }), _jsx(TouchableOpacity, {\n          style: styles.transferButton,\n          onPress: ConfirmPin,\n          children: _jsx(Text, {\n            style: styles.transferButtonText,\n            children: \"Send Funds\"\n          })\n        }), _jsx(TextInput, {\n          style: styles.input,\n          placeholder: \"Enter Password\",\n          placeholderTextColor: \"rgba(0, 0, 0, 0.5)\",\n          secureTextEntry: true,\n          value: ConfirmPassword,\n          onChangeText: setPassword\n        })]\n      })]\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  image: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  balanceContainer: {\n    alignItems: 'center',\n    marginBottom: 30\n  },\n  balanceText: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    marginBottom: 10,\n    color: '#fff',\n    fontFamily: 'Roboto'\n  },\n  currentBalanceContainer: {\n    backgroundColor: '#fff',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 10\n  },\n  amountText: {\n    fontSize: 23,\n    fontWeight: 'bold',\n    color: '#333'\n  },\n  recentContactsContainer: {\n    alignItems: 'center'\n  },\n  recentContactsText: {\n    fontSize: 16,\n    color: '#fff',\n    marginBottom: 5\n  },\n  recentContactText: {\n    fontSize: 14,\n    color: '#fff',\n    marginBottom: 3\n  },\n  input: {\n    height: 40,\n    borderColor: \"black\",\n    borderWidth: 2,\n    borderRadius: 5,\n    marginBottom: 10,\n    padding: 10,\n    margin: 10,\n    fontFamily: 'Roboto',\n    backgroundColor: 'white'\n  },\n  transferButton: {\n    marginHorizontal: 80,\n    backgroundColor: \"#111827\",\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginTop: 15,\n    alignItems: 'center'\n  },\n  transferButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  recentContactsRow: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  contactIconContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginRight: 10\n  }\n});\nexport default SendCash;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","TouchableOpacity","TextInput","ImageBackground","Alert","FlatList","AsyncStorage","Ionicons","collection","query","where","onSnapshot","writeBatch","runTransaction","doc","getDocs","setDoc","addDoc","Timestamp","auth","db","firebase","onAuthStateChanged","signInWithEmailAndPassword","signOut","SMS","axios","encode","jsx","_jsx","jsxs","_jsxs","SendCash","_ref","_route$params","route","navigation","_useState","_useState2","_slicedToArray","balance","setBalance","_useState3","_useState4","email","setEmail","_useState5","_useState6","userInfo","setUserInfo","_useState7","_useState8","transactions","setTransactions","_useState9","_useState10","fullname","setName","_useState11","_useState12","recipientEmail","setRecipientEmail","_useState13","_useState14","amount","setAmount","_useState15","_useState16","recentContacts","setRecentContacts","_useState17","_useState18","ConfirmPassword","setPassword","_useState19","_useState20","password","setPin","_useState21","_useState22","phoneNumber","setPhoneNumber","_useState23","_useState24","otp","setOTP","phoneNumber2","phoneNumber4","_useState25","_useState26","recentContactsList","setRecentContactsList","scannedData","params","global","btoa","twilioAccountSid","twilioAuthToken","getRecipientUid","_ref2","_asyncToGenerator","usersRef","q","querySnapshot","empty","recipient","docs","id","Error","_x","apply","arguments","ConfirmPin","_ref3","user","currentUser","uid","userCredential","then","res","emailVerified","console","log","userData","alert","transferFunds","getRecentContacts","sentTransactionRef","firestore","recentContactsMap","forEach","_doc$data","data","ReceiverUid","ReceiverEmail","TimeStamp","existingTransaction","sortedRecentContacts","Object","values","sort","a","b","slice","_ref5","recipientUid","sfDocRef","_ref6","transaction","sfDoc","get","exists","newWallet","wallet","Number","update","_x2","deduct","_ref7","_ref8","userRef","sf","deductedWallet","_x3","error","SenderEmail","newTransactions","_ref9","Date","recievedHis","_ref10","Sender","getWallet","_ref11","docRef","unsubscribe","docSnap","navigate","handleTransferFunds","style","flex","justifyContent","children","source","require","resizeMode","styles","image","balanceContainer","balanceText","currentBalanceContainer","amountText","label","recentContactsContainer","horizontal","renderItem","_ref12","item","onPress","numberOfLines","fontSize","padding","input","placeholder","placeholderTextColor","value","onChangeText","borderWidth","transferButton","transferButtonText","secureTextEntry","create","alignItems","marginBottom","fontWeight","color","fontFamily","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","recentContactsText","recentContactText","height","borderColor","margin","marginHorizontal","marginTop","recentContactsRow","flexDirection","contactIconContainer","marginRight"],"sources":["C:/Users/User/E-wallet-GasTracker/screens/SendCash.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity, TextInput, ImageBackground, Alert, FlatList } from \"react-native\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { collection, query, where, onSnapshot, writeBatch, runTransaction, doc, getDocs, setDoc, addDoc, Timestamp } from \"firebase/firestore\";\r\nimport { auth, db, firebase } from \"../firebase\";\r\nimport { onAuthStateChanged, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\r\nimport * as SMS from \"expo-sms\";\r\nimport axios from 'axios';\r\nimport { encode } from 'base-64';\r\n\r\n\r\nconst SendCash = ({ route, navigation }) => {\r\n  const [balance, setBalance] = useState(5000); // Initial balance\r\n  const [email, setEmail] = useState();\r\n  const [userInfo, setUserInfo] = useState([]);\r\n  const [transactions, setTransactions] = useState();\r\n  const [fullname, setName] = useState();\r\n  const [recipientEmail, setRecipientEmail] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [recentContacts, setRecentContacts] = useState([]);\r\n  const [ConfirmPassword, setPassword] = useState(\"\");\r\n  const [password, setPin] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [otp, setOTP] = useState('');\r\n  const phoneNumber2 = \"+639166655582\";\r\n  const phoneNumber4 = \"+639166655582\"; // Replace with the recipient's phone number\r\n  const [recentContactsList, setRecentContactsList] = useState([]);\r\n  const scannedData = route.params?.scannedData\r\n\r\n  if (!global.btoa) {\r\n    global.btoa = encode;\r\n  }\r\n\r\n  const twilioAccountSid = \"ACad63823e8efaa1803b3473082f3945b0\";\r\n  const twilioAuthToken = \"c6d17c5de96fdcb54f32e031fd0f3703\";\r\n\r\n\r\n\r\n  // const saveDataToStorage = async (recipientEmail, recentContacts) => {\r\n  //   try {\r\n  //     const data = JSON.stringify({ recipientEmail, recentContacts });\r\n  //     await AsyncStorage.setItem('userData', data);\r\n  //     console.log('Data saved to AsyncStorage');\r\n  //   } catch (error) {\r\n  //     console.log('Error saving data to AsyncStorage:', error);\r\n  //   }\r\n  // };\r\n\r\n  // const loadDataFromStorage = async () => {\r\n  //   try {\r\n  //     const data = await AsyncStorage.getItem('userData');\r\n  //     if (data) {\r\n  //       const { recipientEmail, recentContacts } = JSON.parse(data);\r\n  //       setRecipientEmail(recipientEmail);\r\n  //       setRecentContacts(recentContacts);\r\n  //       console.log('Data loaded from AsyncStorage');\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.log('Error loading data from AsyncStorage:', error);\r\n  //   }\r\n  // };\r\n\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   saveDataToStorage(recipientEmail, recentContacts);\r\n    \r\n  // }, [recipientEmail, recentContacts]);\r\n\r\n  const getRecipientUid = async (email) => {\r\n    const usersRef = collection(db, 'users');\r\n    const q = query(usersRef, where('email', '==', email));\r\n    const querySnapshot = await getDocs(q);\r\n    if (!querySnapshot.empty) {\r\n      const recipient = querySnapshot.docs[0];\r\n      return recipient.id;\r\n    }\r\n    throw new Error('Recipient not found');\r\n  };\r\n\r\n  const ConfirmPin = async () => {\r\n    onAuthStateChanged(auth, async () => {\r\n      const user = auth.currentUser;\r\n      if (user) {\r\n        const uid = user.uid;\r\n        setEmail(user.email);\r\n        const userCredential = await signInWithEmailAndPassword(auth, user.email, ConfirmPassword).then((res) => {\r\n          const user = auth.currentUser;\r\n          if (user.emailVerified) {\r\n            console.log(res);\r\n            const userData = userCredential.user;\r\n            console.log(\"User password:\", userData.password, uid, userData.email);\r\n          } else {\r\n            alert(\"Password does not match\");\r\n          }\r\n        });\r\n       \r\n      }\r\n    });\r\n    if (ConfirmPin){\r\n      transferFunds();\r\n    }\r\n  };\r\n  \r\n // Retrieve recent contacts from sent transactions\r\n const getRecentContacts = () => {\r\n      const user = auth.currentUser.uid;\r\n      const uid = user;\r\n  const sentTransactionRef = firebase.firestore().collection('users').doc(uid).collection('history').doc('DUgVrFDJhas4wAuX07re').collection('Sent')\r\n  sentTransactionRef.onSnapshot((querySnapshot) => {\r\n    const recentContactsMap = {};\r\n    \r\n    querySnapshot.forEach((doc) => {\r\n      const { ReceiverUid, ReceiverEmail, TimeStamp } = doc.data();\r\n      \r\n      console.log(\"transaction\", sentTransactionRef.data());\r\n      if (!recentContactsMap[ReceiverEmail]) {\r\n        recentContactsMap[ReceiverEmail] = {\r\n          ReceiverEmail,\r\n          ReceiverUid,\r\n          TimeStamp,\r\n          \r\n        };\r\n        \r\n      } else {\r\n        const existingTransaction = recentContactsMap[ReceiverEmail];\r\n\r\n        if (TimeStamp > existingTransaction.TimeStamp) {\r\n          recentContactsMap[ReceiverEmail] = {\r\n            ReceiverEmail,\r\n            ReceiverUid,\r\n            TimeStamp,\r\n          };\r\n        }\r\n      }\r\n    });\r\n\r\n    const sortedRecentContacts = Object.values(recentContactsMap)\r\n      .sort((a, b) => b.TimeStamp - a.TimeStamp)\r\n      .slice(0, 5);\r\n\r\n    setRecentContactsList(sortedRecentContacts);\r\n  });\r\n};\r\n\r\n\r\n  // const generateOTP = () => {\r\n  //   const otpLength = 6;\r\n  //   const digits = \"0123456789\";\r\n  //   let otp = \"\";\r\n\r\n  //   for (let i = 0; i < otpLength; i++) {\r\n  //     otp += digits[Math.floor(Math.random() * digits.length)];\r\n  //   }\r\n\r\n  //   return otp;\r\n  // };\r\n\r\n  // const sendOTP = async () => {\r\n  //   const generatedOTP = generateOTP();\r\n\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`,\r\n  //       {\r\n  //         To: \"+639166655582\",\r\n  //         From: \"+19123729424\",\r\n  //         Body: `Your OTP is: ${generatedOTP}`,\r\n  //       },\r\n  //       {\r\n  //         auth: {\r\n  //           username: twilioAccountSid,\r\n  //           password: twilioAuthToken,\r\n  //         },\r\n  //       }\r\n  //     );\r\n\r\n  //     console.log(\"OTP sent:\", response.data);\r\n  //     // Store the generatedOTP and phoneNumber for verification\r\n  //     // in the next step\r\n  //   } catch (error) {\r\n  //     console.error(\"Error sending OTP:\", error.response.data);\r\n  //   }\r\n  // };\r\n\r\n  // sendOTP(phoneNumber);\r\n\r\n  // const handleVerifyOTP = () => {\r\n  //   // Add your OTP verification logic here\r\n  //   if (otp === '') {\r\n  //     Alert.alert('Error', 'Please generate and enter the OTP first.');\r\n  //   } else if (otp === enteredOTP) {\r\n  //     Alert.alert('Success', 'OTP verification successful!');\r\n  //   } else {\r\n  //     Alert.alert('Error', 'Invalid OTP.');\r\n  //   }\r\n  // };\r\n\r\n\r\n  const transferFunds = async () => {\r\n    try {\r\n      const recipientUid = await getRecipientUid(recipientEmail);\r\n\r\n\r\n      const sfDocRef = doc(db, 'users', recipientUid);\r\n\r\n      await runTransaction(db, async (transaction) => {\r\n        const sfDoc = await transaction.get(sfDocRef);\r\n        if (!sfDoc.exists()) {\r\n          throw new Error('Document does not exist!');\r\n        }\r\n        const newWallet = sfDoc.data().wallet + Number(amount);\r\n        transaction.update(sfDocRef, { wallet: newWallet });\r\n      });\r\n      console.log('Transaction successfully committed!: ' + Number(amount) + ' ' + recipientUid);\r\n\r\n      const deduct = async () => {\r\n        const user = auth.currentUser.uid;\r\n        if (user) {\r\n          const uid = user;\r\n          try {\r\n            await runTransaction(db, async (transaction) => {\r\n              const userRef = firebase.firestore().collection('users').doc(uid);\r\n              const sf = await transaction.get(userRef);\r\n              if (!sf.exists) {\r\n                throw new Error('Document does not exist!');\r\n              }\r\n              const deductedWallet = sf.data().wallet - Number(amount);\r\n              transaction.update(userRef, {\r\n                wallet: deductedWallet,\r\n              });\r\n              alert('Successfully sent ₱' + Number(amount) + ' to ' + recipientEmail);\r\n              console.log('Successfully sent ₱' + Number(amount) + ' to ' + recipientEmail);\r\n            });\r\n          } catch (error) {\r\n            alert('Error updating wallet:', error);\r\n            console.error('Error updating wallet:', error);\r\n          }\r\n        }\r\n      };\r\n      await deduct();\r\n     \r\n      const user = auth.currentUser.uid;\r\n      if (user) {\r\n        const uid = user;\r\n        const SenderEmail = auth.currentUser.email;\r\n        const newTransactions = async () => {\r\n          await addDoc(collection(db, 'users', uid, 'history', 'DUgVrFDJhas4wAuX07re', 'Sent'), {\r\n            transactions: amount,\r\n            Timestamp: new Date(),\r\n            ReceiverUid: recipientUid,\r\n            ReceiverEmail: recipientEmail,\r\n          });\r\n        };\r\n        await newTransactions();\r\n\r\n        const recievedHis = async () => {\r\n          await addDoc(collection(db, 'users', recipientUid, 'history', 'DUgVrFDJhas4wAuX07re', 'Recieved'), {\r\n            transactions: amount,\r\n            Timestamp: new Date(),\r\n            Sender: uid,\r\n            SenderEmail: SenderEmail,\r\n          });\r\n        };\r\n        await recievedHis();\r\n\r\n        // const updatedContacts = [recipientEmail, ...recentContacts.slice(0, 4)];\r\n        // setRecentContacts(updatedContacts);\r\n        // saveDataToStorage(recipientEmail, updatedContacts);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error transferring funds:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        const uid = user.uid;\r\n        setEmail(user.email);\r\n\r\n        const getWallet = async () => {\r\n          const docRef = doc(db, 'users', uid);\r\n          const unsubscribe = onSnapshot(docRef, (docSnap) => {\r\n            if (docSnap.exists()) {\r\n              console.log('Document data:', docSnap.data());\r\n              const data = docSnap.data();\r\n              setUserInfo(data);\r\n            } else {\r\n              console.log('No such document!');\r\n            }\r\n          });\r\n\r\n          return unsubscribe;\r\n        };\r\n\r\n        const unsubscribe = getWallet();\r\n\r\n        return () => {\r\n          unsubscribe();\r\n        };\r\n      } else {\r\n        navigation.navigate('Login');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleTransferFunds = () => {\r\n    setBalance(balance - 100);\r\n  };\r\n  useEffect(() => {\r\n    \r\n    getRecentContacts();\r\n    //Set the uid to the passed Scanned QR\r\n    setRecipientEmail(scannedData);\r\n\r\n  }, []);\r\n\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n      <ImageBackground source={require('../assets/background1.jpg')} resizeMode=\"cover\" style={styles.image}>\r\n        <View style={styles.balanceContainer}>\r\n          <Text style={styles.balanceText}>Current Balance</Text>\r\n          <View style={styles.currentBalanceContainer}>\r\n            <Text style={styles.amountText}>₱ {userInfo.wallet}</Text>\r\n          </View>\r\n          {/* <View style={styles.recentContactsContainer}>\r\n            <Text style={styles.recentContactsText}>Recent Contacts:</Text>\r\n            <View style={styles.recentContactsRow}></View>\r\n            {recentContacts.map((contact, index) => (\r\n              <TouchableOpacity key={index} onPress={() => setRecipientEmail(contact)}>\r\n                <View style={styles.contactIconContainer}>\r\n                  <Ionicons name=\"person-circle-outline\" size={24} color=\"white\" />\r\n                  <Text style={styles.recentContactText}>{contact}</Text>\r\n                </View>\r\n              </TouchableOpacity>\r\n            ))}\r\n          </View> */}\r\n\r\n\r\n          <Text style={styles.label}>Recent Contacts</Text>\r\n          <Text>{scannedData}</Text>\r\n          <View style={styles.recentContactsContainer}>\r\n            <FlatList\r\n              data={recentContactsList}\r\n              horizontal={true}\r\n              renderItem={({ item }) => (\r\n                <TouchableOpacity\r\n                \r\n                  onPress={() => setRecipientEmail(item.recipientEmail)}\r\n                >\r\n                  <Text numberOfLines={1} style={{ fontSize: 12 }}>\r\n                    {item.recipientEmail}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              )}\r\n            />\r\n          </View>\r\n\r\n        </View>\r\n        <View style={{ padding: 20 }}>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Input Recipient's Email: \"\r\n            placeholderTextColor=\"rgba(0, 0, 0, 0.5)\"\r\n            value={recipientEmail}\r\n            onChangeText={setRecipientEmail}\r\n          />\r\n          {/* <TextInput\r\n            value={recipientEmail}\r\n            onChangeText={setRecipientEmail}\r\n            placeholder=\"Enter account number\"\r\n            style={styles.input}\r\n          /> */}\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Input Amount: \"\r\n            placeholderTextColor=\"rgba(0, 0, 0, 0.5)\"\r\n            value={amount}\r\n            onChangeText={setAmount}\r\n          />\r\n          <TextInput\r\n            style={{ borderWidth: 1, padding: 10 }}\r\n            placeholder=\"Enter Phone Number\"\r\n            value={phoneNumber}\r\n            onChangeText={setPhoneNumber}\r\n          />\r\n          <TouchableOpacity\r\n            style={styles.transferButton}\r\n            onPress={ConfirmPin}\r\n          >\r\n            <Text style={styles.transferButtonText}>Send Funds</Text>\r\n          </TouchableOpacity>\r\n          <TextInput\r\n            style={styles.input}\r\n            placeholder=\"Enter Password\"\r\n            placeholderTextColor=\"rgba(0, 0, 0, 0.5)\"\r\n            secureTextEntry\r\n            value={ConfirmPassword}\r\n            onChangeText={setPassword}\r\n          />\r\n        </View>\r\n      </ImageBackground>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  image: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n  balanceContainer: {\r\n    alignItems: 'center',\r\n    marginBottom: 30,\r\n  },\r\n  balanceText: {\r\n    fontSize: 40,\r\n    fontWeight: 'bold',\r\n    marginBottom: 10,\r\n    color: '#fff',\r\n    fontFamily: 'Roboto',\r\n  },\r\n  currentBalanceContainer: {\r\n    backgroundColor: '#fff',\r\n    paddingHorizontal: 20,\r\n    paddingVertical: 10,\r\n    borderRadius: 5,\r\n    marginBottom: 10,\r\n  },\r\n  amountText: {\r\n    fontSize: 23,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n  },\r\n  recentContactsContainer: {\r\n    alignItems: 'center',\r\n  },\r\n  recentContactsText: {\r\n    fontSize: 16,\r\n    color: '#fff',\r\n    marginBottom: 5,\r\n  },\r\n  recentContactText: {\r\n    fontSize: 14,\r\n    color: '#fff',\r\n    marginBottom: 3,\r\n  },\r\n  input: {\r\n    height: 40,\r\n    borderColor: \"black\",\r\n    borderWidth: 2,\r\n    borderRadius: 5,\r\n    marginBottom: 10,\r\n    padding: 10,\r\n    margin: 10,\r\n    fontFamily: 'Roboto',\r\n    backgroundColor: 'white'\r\n  },\r\n  transferButton: {\r\n    marginHorizontal: 80,\r\n    backgroundColor: \"#111827\",\r\n    paddingVertical: 10,\r\n    borderRadius: 5,\r\n    marginTop: 15,\r\n    alignItems: 'center'\r\n  },\r\n  transferButtonText: {\r\n    color: '#fff',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n  },\r\n  recentContactsRow: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  contactIconContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginRight: 10,\r\n  },\r\n\r\n});\r\n\r\nexport default SendCash;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}